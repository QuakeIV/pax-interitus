cmake_minimum_required(VERSION 3.5)

project(freespace-aurora VERSION 0.1 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_GENERATOR Ninja)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_PREFIX_PATH "$ENV{HOME}/Qt/6.2.4/gcc_64") #we are Qt 6.2.4 for now
find_package(QT NAMES Qt6 COMPONENTS Widgets OpenGLWidgets REQUIRED)
find_package(Qt6 COMPONENTS Widgets OpenGLWidgets REQUIRED)
#get_target_property(QtCore_location Qt6::Core LOCATION)
#get_filename_component(QtCore_libdir ${QtCore_location} DIRECTORY)
#message("wumbo ${QtCore_libdir}")

file(GLOB PROJECT_SOURCES "main.cpp;mainwindow.cpp;systemwindow.cpp" "*.h" "*.ui")
message(${PROJECT_SOURCES})
add_subdirectory(components)
add_subdirectory(designer_windows)


#qt_add_executable(freespace-aurora
#    ${PROJECT_SOURCES}
#)

#qt_add_resources(freespace-aurora "images"
#    PREFIX "/images"
#    FILES icon.png)

#target_link_libraries(freespace-aurora PRIVATE Qt6::Widgets Qt6::OpenGLWidgets libuniverse)

#set_target_properties(freespace-aurora PROPERTIES
#    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
#    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
#    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
#)

# wrapper annex
# =============================== CMake target - libuniverse ===============================


# Define the sample shared library for which we will create bindings.
set(libuniverse_sources universe.cpp systemrenderer.cpp systemrenderermousebackend.cpp orbittype.cpp celestialwindow.cpp solarsystemtype.cpp celestialtype.cpp)
add_library(libuniverse SHARED ${libuniverse_sources})
target_link_libraries(libuniverse PRIVATE Qt6::Widgets Qt6::OpenGLWidgets)
set_property(TARGET libuniverse PROPERTY PREFIX "")

# Needed mostly on Windows to export symbols, and create a .lib file, otherwise the binding
# library can't link to the sample library.
#target_compile_definitions(libuniverse PRIVATE BINDINGS_BUILD)


# ====================== Shiboken target for generating binding C++ files  ====================

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(binding_sources
    ${CMAKE_CURRENT_BINARY_DIR}/paxpython/paxpython_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/paxpython/systemrenderer_wrapper.cpp
)
# i dont see why we would automoc these
set_property(SOURCE ${binding_sources} PROPERTY SKIP_AUTOGEN ON)

# Set up the options to pass to shiboken.

set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    -I${CMAKE_SOURCE_DIR}:$ENV{HOME}/Qt/6.2.4/gcc_64/include/QtCore:$ENV{HOME}/Qt/6.2.4/gcc_64/include:$ENV{HOME}/Qt/6.2.4/gcc_64/include/QtWidgets:$ENV{HOME}/Qt/6.2.4/gcc_64/include/QtOpenGLWidgets:$ENV{HOME}/Qt/6.2.4/gcc_64/include/QtGui
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
)
message(${CMAKE_SOURCE_DIR}/shiboken6/include/QtCore)

# NOTE: needs llvm to find clang headers
# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(OUTPUT ${binding_sources}
                    COMMAND LD_LIBRARY_PATH=shiboken6 shiboken6/shiboken6
                    ${shiboken_options} bindings.h bindings.xml
                    DEPENDS bindings.h bindings.xml libuniverse
                    IMPLICIT_DEPENDS CXX bindings.h
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for bindings.xml.")


# =============================== CMake target - Universe =============================

# Define and build the bindings library.
add_library(libshiboken SHARED IMPORTED)
set_target_properties(libshiboken PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/shiboken6/libshiboken6.abi3.so.6.3)
add_library(paxpython MODULE ${binding_sources})
link_directories(${CMAKE_SOURCE_DIR})
target_link_libraries(paxpython PRIVATE Qt6::Widgets Qt6::OpenGLWidgets libuniverse libshiboken)

# Apply relevant include and link flags.
find_package(Python COMPONENTS Development)
target_include_directories(paxpython PRIVATE ${Python_INCLUDE_DIRS})
#message(${Python_INCLUDE_DIRS})
target_include_directories(paxpython PRIVATE "shiboken6/include")
target_include_directories(paxpython PRIVATE "${CMAKE_SOURCE_DIR}/shiboken6/include/QtCore")
target_include_directories(paxpython PRIVATE "${CMAKE_SOURCE_DIR}/shiboken6/include/QtOpenGL")
target_include_directories(paxpython PRIVATE "${CMAKE_SOURCE_DIR}/shiboken6/include/QtGui")
target_include_directories(paxpython PRIVATE "${CMAKE_SOURCE_DIR}/shiboken6/include/QtOpenGLWidgets")
target_include_directories(paxpython PRIVATE "${CMAKE_SOURCE_DIR}/shiboken6/include/QtWidgets")
target_include_directories(paxpython PRIVATE ${CMAKE_SOURCE_DIR})

# Adjust the name of generated module.
set_property(TARGET paxpython PROPERTY PREFIX "")
set_property(TARGET paxpython PROPERTY OUTPUT_NAME
             "paxpython${PYTHON_EXTENSION_SUFFIX}")


